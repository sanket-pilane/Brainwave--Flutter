import 'dart:async';

import 'package:brainwave/src/constants/assets.dart';

import 'package:brainwave/src/features/code/bloc/chat_bloc.dart';
import 'package:brainwave/src/features/code/domain/model/chat_model.dart';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_markdown/flutter_markdown.dart';

import 'package:flutter_svg/svg.dart';
import 'package:google_fonts/google_fonts.dart';

class ChatPage extends StatefulWidget {
  const ChatPage({super.key});

  @override
  State<ChatPage> createState() => _ChatPageState();
}

class _ChatPageState extends State<ChatPage> {
  TextEditingController controller = TextEditingController();
  final ChatBloc chatBloc = ChatBloc();

  // Map to manage stream controllers for each message
  final Map<int, StreamController<String>> _streamControllers = {};

  void _startStream(int messageId, String _response) {
    // Create a new StreamController for the message ID if it doesn't already exist
    if (_streamControllers.containsKey(messageId)) {
      // Dispose of the old controller to avoid errors
      _streamControllers[messageId]!.close();
    }
    _streamControllers[messageId] = StreamController<String>();
    StreamController<String> controller = _streamControllers[messageId]!;

    // Simulate typing effect
    Future.delayed(Duration.zero, () async {
      for (int i = 0; i < _response.length; i++) {
        await Future.delayed(
            const Duration(milliseconds: 10)); // Simulates typing delay
        controller.add(_response.substring(0, i + 1));
      }
      controller.close(); // Close the stream when done
    });
  }

  @override
  void dispose() {
    // Dispose all stream controllers
    for (var controller in _streamControllers.values) {
      controller.close();
    }
    chatBloc.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: BlocConsumer<ChatBloc, ChatState>(
        bloc: chatBloc,
        listener: (context, state) {},
        builder: (context, state) {
          switch (state.runtimeType) {
            case ChatSuccesState:
              List<ChatModel> messages = (state as ChatSuccesState).messages;

              return Column(
                children: [
                  // Expanded ListView for the main content
                  Expanded(
                    child: messages.isEmpty
                        ? Center(
                            child: ShaderMask(
                              shaderCallback: (bounds) => const LinearGradient(
                                colors: [
                                  Colors.blue,
                                  Colors.purple,
                                  Colors.pink
                                ],
                              ).createShader(bounds),
                              child: const Text(
                                "Hello, Sanket",
                                style: TextStyle(
                                  fontSize: 24,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.white,
                                ),
                              ),
                            ),
                          )
                        : ListView.builder(
                            itemCount: messages.length,
                            itemBuilder: (context, index) {
                              final message = messages[index];
                              final isUser = message.role == 'user';

                              // Start streaming for this message
                              _startStream(index, message.parts.first.text);

                              return Align(
                                alignment: isUser
                                    ? Alignment.centerRight
                                    : Alignment.centerLeft,
                                child: Container(
                                  margin: const EdgeInsets.symmetric(
                                      vertical: 10, horizontal: 2),
                                  padding: isUser
                                      ? const EdgeInsets.symmetric(
                                          horizontal: 20, vertical: 6)
                                      : const EdgeInsets.symmetric(
                                          horizontal: 8),
                                  decoration: BoxDecoration(
                                    color: isUser
                                        ? const Color.fromARGB(
                                            255, 60, 101, 124)
                                        : Colors.transparent,
                                    borderRadius: BorderRadius.only(
                                      topLeft: isUser
                                          ? const Radius.circular(30)
                                          : Radius.zero,
                                      topRight: isUser
                                          ? Radius.zero
                                          : const Radius.circular(30),
                                      bottomLeft: const Radius.circular(30),
                                      bottomRight: const Radius.circular(30),
                                    ),
                                  ),
                                  child: Column(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.start,
                                    children: [
                                      // Show icon for bot messages
                                      if (!isUser)
                                        Padding(
                                          padding: const EdgeInsets.symmetric(
                                              vertical: 8.0),
                                          child: SvgPicture.asset(
                                            kBrainwave, // Path to your SVG file in assets
                                            height: 30, // Set height
                                            width: 30, // Set width
                                          ),
                                        ),
                                      // StreamBuilder for live updates
                                      isUser
                                          ? Text(
                                              message.parts.first.text,
                                              style: GoogleFonts.lato(
                                                fontWeight: isUser
                                                    ? FontWeight.bold
                                                    : FontWeight.w400,
                                                fontSize: isUser ? 16 : 14,
                                              ),
                                            )
                                          : StreamBuilder<String>(
                                              stream: _streamControllers[index]
                                                  ?.stream,
                                              builder: (context, snapshot) {
                                                if (snapshot.connectionState ==
                                                    ConnectionState.waiting) {
                                                  return const Text(
                                                      "Loading...");
                                                } else if (snapshot.hasData) {
                                                  return MarkdownBody(
                                                    data: snapshot.data!,
                                                    styleSheet:
                                                        MarkdownStyleSheet(
                                                      p: GoogleFonts.lato(
                                                        fontWeight: isUser
                                                            ? FontWeight.bold
                                                            : FontWeight.w400,
                                                        fontSize:
                                                            isUser ? 16 : 14,
                                                      ),
                                                    ),
                                                  );
                                                } else if (snapshot.hasError) {
                                                  return Text(
                                                      "Error: ${snapshot.error}");
                                                } else {
                                                  return const Text("Done!");
                                                }
                                              },
                                            ),
                                    ],
                                  ),
                                ),
                              );
                            },
                          ),
                  ),

                  // Fixed TextField at the bottom
                  Container(
                    padding:
                        const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                    color: Colors.black,
                    child: Row(
                      children: [
                        Expanded(
                          child: TextField(
                            style: const TextStyle(
                              color: Colors.white,
                            ),
                            controller: controller,
                            decoration: InputDecoration(
                              hintText: "Ask Gemini",
                              hintStyle: const TextStyle(color: Colors.grey),
                              filled: true,
                              fillColor: Colors.grey[900],
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(25),
                                borderSide: BorderSide.none,
                              ),
                            ),
                          ),
                        ),
                        const SizedBox(width: 8),
                        IconButton(
                          icon: const Icon(Icons.send, color: Colors.white),
                          onPressed: () {
                            if (controller.text.isNotEmpty) {
                              String text = controller.text;
                              controller.clear();
                              chatBloc.add(ChatGenerateNewTextMessageEvent(
                                  prompt: text));
                            }
                          },
                        ),
                      ],
                    ),
                  ),
                ],
              );

            default:
              return const SizedBox();
          }
        },
      ),
    );
  }
}
